import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { toast } from "react-toastify";
import API from "../../../helper";
import { IAddEvents } from "../../../interface/IAddEvents";

export interface ILeaveRecords {
  inProgress: boolean;
  status: number;
  eventDetails: IAddEvents[];
  eventDetail: IAddEvents;
  currentAction: string;
  UpdateId: number;
  viewDetails: boolean;
  handleEvents: boolean;
}

const eventDetailsData = [
  {
    id: "0",
    start: new Date(),
    end: new Date(),
    title: "",
    description: "",
  },
];

const UpdateEventDetails = {
  id: "0",
  start: new Date(),
  end: new Date(),
  title: "",
  description: "",
};

export const initialState: ILeaveRecords = {
  inProgress: false,
  status: 0,
  eventDetails: eventDetailsData,
  eventDetail: UpdateEventDetails,
  currentAction: "",
  UpdateId: 0,
  viewDetails: false,
  handleEvents: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const eventDetailsAsync = createAsyncThunk(
  "event-details-async",
  async () => {
    try {
      const eventDetailsResponse = await API.get(
        `http://localhost:8000/addEvents`
      );
      return eventDetailsResponse.data;
    } catch (errors) {
      console.log(`No Data Found >>> ${errors}`);
    }
  }
);
export const addEventsFormAsync = createAsyncThunk(
  "add-event-async",
  async ({ addEvents }: { addEvents: IAddEvents }) => {
    try {
      const addEventsForm = await API.post(
        `http://localhost:8000/addEvents`,
        addEvents
      );
      return addEventsForm.status;
    } catch (errors) {
      console.log(`No Data Found >>> ${errors}`);
    }
  }
);
export const updateEventsFormAsync = createAsyncThunk(
  "update-event-async",
  async ({ updateEvents, id }: { updateEvents: any; id: number }) => {
    try {
      console.log(id);
      const updateEventsForm = await API.put(
        ` http://localhost:8000/addEvents/${id}`,
        updateEvents
      );
      return updateEventsForm.status;
    } catch (errors) {
      console.log(`No Data Found >>> ${errors}`);
    }
  }
);

const eventDetailSlice = createSlice({
  name: "eventDetails",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // TODO : need to revisit again.
    toggleAddEvents: (state, action) => {
      state.handleEvents = action.payload;
    },
    viewOnly: (state, action) => {
      state.viewDetails = action.payload;
    },
    userAction: (state, action) => {
      state.currentAction = action.payload;
    },
    updateEvents: (state, action) => {
      const { id, start, end, title,description } = action.payload;
      console.log(action.payload);
      state.UpdateId = id;
      state.eventDetail.start = start;
      state.eventDetail.end = end;
      state.eventDetail.title = title;
      state.eventDetail.description = description;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(eventDetailsAsync.pending, (state) => {
        state.inProgress = true;
      })
      .addCase(eventDetailsAsync.fulfilled, (state, action: any) => {
        state.inProgress = false;
        console.log("Get Event Details >>>", action);
        if (action.payload) {
          state.eventDetails = action.payload;
        }
      })
      .addCase(addEventsFormAsync.pending, (state) => {
        state.inProgress = true;
      })
      .addCase(addEventsFormAsync.fulfilled, (state, action) => {
        state.inProgress = false;
        console.log("Events Added");
        toast.success("Event Added successfully");
      })
      .addCase(updateEventsFormAsync.fulfilled, (state) => {
        state.inProgress = false;
        toast.info("Event updated successfully");
      });
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});
export const { viewOnly, toggleAddEvents, userAction, updateEvents } =
  eventDetailSlice.actions;
export default eventDetailSlice.reducer;
